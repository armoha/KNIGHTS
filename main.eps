
const L_ANYWHERE = $L("Anywhere");
const L_MAIN = $L("main");
const L_3X3 = $L("3x3");
const L_16x16 = $L("16x16");

const U_HERO = 61;
const U_CHIMERA = 37;
const U_ANY = 229;

const ORDER_HOLD = 107;
const ORDER_PATROL = 152;

const p_cunit = PVariable();
const p_pos_x_old = PVariable();
const p_pos_y_old = PVariable();
const p_chunk_x_old = PVariable();
const p_chunk_y_old = PVariable();
const p_armor_max = PVariable();
const p_armor_recover = PVariable();
const p_attackspeed = PVariable();
const p_damage = PVariable();

const monster_spawn_type = EUDArray(1000);
const monster_spawn_x = EUDArray(1000);
const monster_spawn_y = EUDArray(1000);
const chunk_spawns = EUDArray(256);
const chunk_buffer = EUDArray(8);

var time = 0;
var test_delay = 0;

object Vector2 {
    var x, y;
    function constructor(x, y) {
        this.x = x;
        this.y = y;
    }
};


function CenterLoc(location, x, y) {
    setloc(L_MAIN, x, y);
    MoveLocation(location, $U("Map Revealer"), $P12, L_MAIN);
}

function CenterLocHero(location, playerID) {
    MoveLocation(location, U_HERO, playerID, L_ANYWHERE);
}

function EnemiesAtLoc(location) {
    if (Bring(Foes, AtLeast, 1, U_ANY, location)) return 1;
    return 0;
}

function GetVision(playerID) {
    if (playerID == 0) RunAIScript("+Vi0");
    else if (playerID == 1) RunAIScript("+Vi1");
    else if (playerID == 2) RunAIScript("+Vi2");
    else if (playerID == 3) RunAIScript("+Vi3");
    else if (playerID == 4) RunAIScript("+Vi4");
    else if (playerID == 5) RunAIScript("+Vi5");
    else if (playerID == 6) RunAIScript("+Vi6");
    else if (playerID == 7) RunAIScript("+Vi7");
}

function LoseVision(playerID) {
    if (playerID == 0) RunAIScript("-Vi0");
    else if (playerID == 1) RunAIScript("-Vi1");
    else if (playerID == 2) RunAIScript("-Vi2");
    else if (playerID == 3) RunAIScript("-Vi3");
    else if (playerID == 4) RunAIScript("-Vi4");
    else if (playerID == 5) RunAIScript("-Vi5");
    else if (playerID == 6) RunAIScript("-Vi6");
    else if (playerID == 7) RunAIScript("-Vi7");
}

function GetLocationPoint(location) {
	const locTable = EPD(0x58DC4C);
	return dwread_epd(locTable + location * 5), dwread_epd(locTable + location * 5 + 1);
}

function StoreSpawnPositions() {
    var i = 0;
    foreach(unit : EUDLoopCUnit()) {
        if (unit.playerID == $P9) {
            monster_spawn_type[i] = unit.unitType;
            monster_spawn_x[i] = unit.posX;
            monster_spawn_y[i] = unit.posY;
            unit.remove();
            i++;
        }
    }
}

function GetChunkID(chunkX, chunkY) {
    if (chunkX >= 0 && chunkX < 256 && chunkY >= 0 && chunkY < 256) {
        return (chunkX + (chunkY * 256)) + 1;
    }
    // printAll("ERROR: INVALID CHUNK COORDINATES!");
    return 0;
}

function GetChunkCoords(chunkID) {
    var chunkY, chunkX = div(chunkID - 1, 256);
    if (chunkX >= 0 && chunkX < 256 && chunkY >= 0 && chunkY < 256) {
        return chunkX, chunkY;
    }
    // printAll("ERROR: INVALID CHUNK COORDINATES FROM ID!");
    return 1000, 1000;
}

function FillChunkBuffer(chunkX, chunkY) {
    // returns an array of ids of the 8 surrounding chunks, ids are zero if not valid like at the edge of the map
    // starts top and goes clockwise. Fills global chunk buffer.
    for (var i = 0; i < 8; i++) chunk_buffer[i] = 0;
    chunk_buffer[0] = GetChunkID(chunkX, chunkY - 1);
    chunk_buffer[1] = GetChunkID(chunkX + 1, chunkY - 1);
    chunk_buffer[2] = GetChunkID(chunkX + 1, chunkY);
    chunk_buffer[3] = GetChunkID(chunkX + 1, chunkY + 1);
    chunk_buffer[4] = GetChunkID(chunkX, chunkY + 1);
    chunk_buffer[5] = GetChunkID(chunkX - 1, chunkY + 1);
    chunk_buffer[6] = GetChunkID(chunkX - 1, chunkY);
    chunk_buffer[7] = GetChunkID(chunkX - 1, chunkY - 1);
}

function SpawnUnitsAtChunk(chunkX, chunkY) {
    const limit_left = (chunkX * 16) * 32;
    const limit_right = limit_left + 512;
    const limit_top = (chunkY * 16) * 32;
    const limit_bottom = limit_top + 512;
    for (var i = 0; i < 1000; i++) {
        if (monster_spawn_x[i] >= limit_left && monster_spawn_x[i] < limit_right && monster_spawn_y[i] >= limit_top && monster_spawn_y[i] < limit_bottom) {
            if (monster_spawn_type[i] > 0) {
                setloc(L_MAIN, monster_spawn_x[i], monster_spawn_y[i]);
                CreateUnit(1, monster_spawn_type[i], L_MAIN, $P7);
            }
        }
    }
    chunk_spawns[GetChunkID(chunkX, chunkY)] += 1;
}

function JustEnteredChunk(chunkX, chunkY) {
    // const id = GetChunkID(chunkX, chunkY);
    // const x, y = GetChunkCoords(id);
    // eprintf("original coords: {} {} | id: {} | converted coords: {} {}", chunkX, chunkY, id, x, y);
    FillChunkBuffer(chunkX, chunkY);
    for (var i = 0; i < 8; i++) {
        if (chunk_buffer[i] > 0 && chunk_spawns[chunk_buffer[i]] == 0) {
            const x, y = GetChunkCoords(chunk_buffer[i]);
            SpawnUnitsAtChunk(x, y);
        }
    }
}

function GetChunkAtPos(positionX, positionY) {
    var chunk_pos_x = (positionX / 32) / 16;
    var chunk_pos_y = (positionY / 32) / 16;
    return chunk_pos_x, chunk_pos_y;
}

function CreateCUnit(unitType, playerID, location) : CUnit {
	const newUnit = CUnit.from_read(EPD(0x628438));
	CreateUnit(1, unitType, location, playerID);
	return newUnit;
}

function Is_Alive(playerID) {
    if (Command(playerID, AtLeast, 1, U_HERO)) return true;
    return false;
}

function CreateImageSpriteAtLocation(imageID, location) {
	SetMemoryX(0x00666458, SetTo, imageID, 0x0000ffff);
	CreateUnit(1, 33, location, $P8);
	RemoveUnit(33, AllPlayers);
	SetMemoryX(0x00666458, SetTo, 546, 0x0000ffff);
}

function CreateUnitDeathAtLocation(Unit, location) {
    CreateUnit(1, Unit, location, $P8);
    KillUnit(Unit, $P8);
}

function DamageUnit(unit:CUnit, damage) {
	if (unit.hp < damage * 256) unit.hp = 0;
	if (unit.hp == 0) unit.die();
	else unit.hp -= damage * 256;
}

function GetDirectionVector(point0 : Vector2, point1 : Vector2) : Vector2 {
    // returns direction (vector + 10000) for negative numbers.
    const direction = Vector2(((point1.x - point0.x) + 10000), ((point1.y - point0.y) + 10000));
    return direction;
}

function MoveVectorDirection(point : Vector2, direction : Vector2, distance) : Vector2 {
    // returns a vector transformed by the direction and distance.
    const sign = Vector2(0, 0);
    const new_point = Vector2(point.x, point.y);
    const new_direction = Vector2(direction.x, direction.y);

    if (new_direction.x < 10000) {
        new_direction.x = ((10000 - new_direction.x));
    } else {
        new_direction.x = ((new_direction.x - 10000));
        sign.x = 1;
    }
    if (new_direction.y < 10000) {
        new_direction.y = ((10000 - new_direction.y));
    } else {
        new_direction.y = ((new_direction.y - 10000));
        sign.y = 1;
    }
    
    // NORMALIZING THE VECTOR
    // const nomalizedXY = lengthdir(/*some fixed length*/, direction)
    if (new_direction.x > new_direction.y) {
        new_direction.x = (new_direction.x * 10000) / (new_direction.y * 10000);
        new_direction.y = 10000;
    } else {
        new_direction.y = (new_direction.y * 10000) / (new_direction.x * 10000);
        new_direction.x = 10000;
    }
    eprintf("{} {}", new_direction.x, new_direction.y);
    // const length = sqrt(new_direction.x * new_direction.x + new_direction.y * new_direction.y);
    // eprintf("{} {} {}", new_direction.x, new_direction.y, length);
    // // f_printAll("{} {} {}", new_direction.x, new_direction.y, length);
    // new_direction.x = (new_direction.x * 1000) / length;
    // new_direction.y = (new_direction.y * 1000) / length;
    // new_direction.x /= length;
    // new_direction.y /= length;
    
    // SETTING UP THE DIRECTION TO BE ADDED TO THE OLD POSITION
    new_direction.x *= distance;
    new_direction.y *= distance;
    new_direction.x /= 1000;
    new_direction.y /= 1000;

    if (sign.x == 0) new_point.x = point.x - (new_direction.x * distance);
    else new_point.x = point.x + (new_direction.x * distance);
    if (sign.y == 0) new_point.y = point.y - (new_direction.y * distance);
    else new_point.y = point.y + (new_direction.y * distance);
    return new_point;
}

function GetAngle(origin : Vector2, destination: Vector2) {
    const angle = atan2(destination.y - origin.y, destination.x - origin.x);
    return angle;
}

function MoveVectorTowards(vector0: Vector2, vector1: Vector2, distance) : Vector2 {
    const angle = GetAngle(vector0, vector1);
    const direction = Vector2(0, 0);
    const new_vector = Vector2(vector0.x, vector0.y);
    direction.x, direction.y = lengthdir(distance, angle);
    new_vector.x += direction.x;
    new_vector.y += direction.y;
    return new_vector;
}

// GAME LOGIC
function onPluginStart() {
    StoreSpawnPositions();
    EUDPlayerLoop()();
        const PID = getcurpl();
        p_armor_max[PID] = 1000 * 256;
        p_damage[PID] = 20;
        // GetVision($P7);
        if (Command(PID, AtLeast, 1, U_HERO)) {
            MoveLocation(L_MAIN, U_HERO, PID, L_ANYWHERE);
            RemoveUnit(U_HERO, PID);
            p_cunit[PID] = CreateCUnit(U_HERO, PID, L_MAIN);
            // CenterView(L_MAIN);
        }
    EUDEndPlayerLoop();
}

var scalar = 10;
function afterTriggerExec() {
    time += 1;
    EUDPlayerLoop()();
        const PID = getcurpl();
        if (PID >= 0 && PID < 6) {
            const unit = CUnit(p_cunit[PID]);
            var order_input = 0;
            var unit_is_moving = 0;
            var unit_just_attacked = 0;
            if (unit.orderID == ORDER_HOLD || unit.orderID == ORDER_PATROL) {
                order_input = unit.orderID;
                unit.orderID = 3;
            }
            if (unit.posX == p_pos_x_old[PID] && unit.posY == p_pos_y_old[PID]) {
                unit_is_moving = 0;
            } else {
                p_pos_x_old[PID] = unit.posX;
                p_pos_y_old[PID] = unit.posY;
                unit_is_moving = 1;
            }
            // movement stuck fix
            if (!unit_is_moving && unit.currentSpeed1 > 0) {
                unit.currentSpeed1 = 0;
                unit.currentSpeed2 = 0;
            }
            if (unit_is_moving) {
                const x, y = GetChunkAtPos(unit.posX, unit.posY);
                if (p_chunk_x_old[PID] != x || p_chunk_y_old[PID] != y) {
                    p_chunk_x_old[PID] = x;
                    p_chunk_y_old[PID] = y;
                    JustEnteredChunk(x, y);
                }
            }

            // ARMOR
            if (Is_Alive(PID)) {
                CenterLocHero(L_16x16, PID);
                CenterLocHero(L_3X3, PID);
                if (p_armor_max[PID] > 0 && EnemiesAtLoc(L_16x16)) {
                    if (EnemiesAtLoc(L_3X3) && p_armor_recover[PID] == 0) p_armor_recover[PID] = 1;
                } else {
                    if (unit.shield < p_armor_max[PID]) unit.shield += 10 * 256;
                    if (unit.shield > p_armor_max[PID]) unit.shield = p_armor_max[PID];
                }
                if (!EnemiesAtLoc(L_3X3) && p_armor_recover[PID] > 0) {
                    p_armor_recover[PID] = 0;
                    unit.shield = p_armor_max[PID];
                    CreateImageSpriteAtLocation(377, L_3X3);
                    PlayWAV("staredit/wav/dodge.ogg");
                }
            }

            // UNIT ATTACK
            if (Is_Alive(PID)) {
                if (unit.groundWeaponCooldown == 26) {
                    unit.groundWeaponCooldown -= p_attackspeed[PID];
                    DamageUnit(unit.orderTargetUnit, p_damage[PID]);
                    unit_just_attacked = 1;
                }
            }

            if (unit_just_attacked) {
                DisplayText("attacked.");
            }

            const vec1 = Vector2(unit.posX, unit.posY);
            const vec2 = Vector2(unit.orderTargetX, unit.orderTargetY);
            const vec3 = MoveVectorTowards(vec1, vec2, scalar);
            eprintf("scalar:{} | {} {}", scalar, vec3.x, vec3.y);
            setloc(L_MAIN, vec3.x, vec3.y);
            if (test_delay == 0) {
                test_delay = 1;
                CreateUnitDeathAtLocation($U("Zerg Scourge"), L_MAIN);
                MinimapPing(L_MAIN);
            } else if (test_delay > 0) test_delay--;
            scalar += 10;
            if (scalar >= 6000) scalar = 0;
            

            // test
            // if (order_input == ORDER_HOLD) {
            //     scalar -= 1;
            // } 
            // else if (order_input == ORDER_PATROL) {
            //     scalar += 1;
            // }
            // direction.x = direction.x / 1000;
            // direction.y = direction.y / 1000;
        }
    EUDEndPlayerLoop();
}